import os
from functools import wraps
from typing import List

from modules.interface import AIDOUserInterface
from modules.scheduler import start_scheduler
from modules.simulation_helpers import SimulationParameter, SimulationParameterDictionary


class AIDO:
    """
    AIDO
    ----
    
    The AI Detector Optimization framework (AIDO) is a tool for finding the optimal
    design of particle physics detectors. By interpolating the results of simulations
    with slightly different geometries, it can learn the best set of detector parameters.

    Using b2luigi Tasks, this framework can run parallel simulation Tasks and
    reconstruction and optimization ML models on GPUs.

    Remarks
    -------
    For geant4 simulations with multi-threading capabilities, it is advisable to work in single-threaded mode.

    Workflow
    --------
    The internal optimization loop is structured as follows:
        1) Start a total of 'simulation_tasks' simulations using 'threads'.
        2) Merge and write an input file for the Reconstruction Task
        3) Run the Reconstruction Task
        4) Convert to pandas.DataFrame for the Optimizer model
        5) Run the Optimizer, which predicts the best set of parameters for this iteration

    Repeat for a number of 'max_iterations'.

    Results
    -------
    The 'results' directory contain:
        - 'loss': Loss of the Surrogate and Optimizer models
        - 'models': pytorch files with the states and weights of the surrogate and optimizer models
        - 'parameters': a list of parameter dictionaries (.json) with the parameters of each iteration
        - 'plots': evolution plots of the parameters
        - 'task_outputs': Task outputs generated by the b2luigi scheduler. Can be safely removed to
            save disc space.
    """

    def optimize(
            parameters: List[SimulationParameter] | SimulationParameterDictionary,
            user_interface: AIDOUserInterface,
            simulation_tasks: int = 1,
            max_iterations: int = 50,
            threads: int = 1,
            results_dir: str | os.PathLike = "./results/",
            description: str = ""
            ):
        """
        Args:
            parameters (List[AIDO.parameter] | SimulationParameterDictionary): Instance of a
                SimulationParameterDictionary with all the desired parameters. These are the starting parameters
                for the optimization loop and the outcome can depend on their starting values. Can also be a
                simple list of SimulationParameter / AIDO.parameters (the latter is a proxy method).
            user_interface (class or instance inherited from AIDOUserInterface): Regulates the interaction
                between user-defined code (simulation, reconstruction, merging of output files) and the
                AIDO workflow manager.
            simulation_tasks (int): Number of simulations started during each iteration.
            max_iterations (int): Maximum amount of iterations of the optimization loop
            threads (int): Allowed number of threads to allocate the simulation tasks.
                NOTE There is no benefit in having 'threads' > 'simulation_tasks' per se, but in some cases,
                errors involving missing dependencies after the simulation step can be fixed by setting:
                'threads' = 'simulation_tasks' + 1.
        """
        if isinstance(parameters, list):
            parameters = SimulationParameterDictionary(parameters)
            parameters.description = description

        start_scheduler(
            parameters=parameters,
            user_interface=user_interface,
            simulation_tasks=simulation_tasks,
            max_iterations=max_iterations,
            threads=threads,
            results_dir=results_dir
        )

    def parameter(*args, **kwargs) -> SimulationParameter:
        """ Create a new Simulation Parameter

        Args
        ----
            name (str): The name of the parameter.
            starting_value (Any): The starting value of the parameter.
            current_value (Any, optional): The current value of the parameter. Defaults to None.
            units (str, optional): The units of the parameter. Defaults to None.
            optimizable (bool, optional): Whether the parameter is optimizable. Defaults to True.
            min_value (float, optional): The minimum value of the parameter. Defaults to None.
            max_value (float, optional): The maximum value of the parameter. Defaults to None.
            sigma (float, optional): The standard deviation of the parameter. Defaults to None.
            discrete_values (Iterable, optional): The allowed discrete values of the parameter. Defaults to None.
            cost (float, optional): A float that quantifies the cost per unit of this Parameter. Defaults to None.
        """

        @wraps(SimulationParameter.__init__)
        def wrapper(*args, **kwargs):
            return SimulationParameter(*args, **kwargs)

        return wrapper(*args, **kwargs)
    
    def parameter_dict(*args, **kwargs) -> SimulationParameterDictionary:
        """
        Decorator function that wraps the initialization of the SimulationParameterDictionary class.
        """

        @wraps(SimulationParameterDictionary.__init__)
        def wrapper(*args, **kwargs):
            return SimulationParameterDictionary(*args, **kwargs)

        return wrapper(*args, **kwargs)

    def check_results_folder_format(directory: str | os.PathLike) -> bool:
        """
        Checks if the specified directory is of the 'results' format specified by AIDO.optimize().

        Args:
            directory (str | os.PathLike): The path to the directory to check.

        Returns:
            bool: True if the directory contains all the required folders
                  ("loss", "models", "parameters", "plots", "task_outputs"),
                  False otherwise.
        """
        existing_folders = set(os.listdir(directory))
        required_folders = set(["loss", "models", "parameters", "plots", "task_outputs"])
        return True if required_folders.issubset(existing_folders) else False
