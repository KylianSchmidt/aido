import os
from typing import List

from aido.interface import AIDOBaseUserInterface
from aido.scheduler import start_scheduler
from aido.simulation_helpers import SimulationParameter, SimulationParameterDictionary

"""
AIDO
----

The AI Detector Optimization framework (AIDO) is a tool for finding the optimal
design of particle physics detectors. By interpolating the results of simulations
with slightly different geometries, it can learn the best set of detector parameters.

Using b2luigi Tasks, this framework can run parallel simulation Tasks and
reconstruction and optimization ML models on GPUs.

Remarks
-------
For geant4 simulations with multi-threading capabilities, it is advisable to work in single-threaded mode.

Workflow
--------
The internal optimization loop is structured as follows:
    1) Start a total of 'simulation_tasks' simulations using 'threads'.
    2) Merge and write an input file for the Reconstruction Task
    3) Run the Reconstruction Task
    4) Convert to pandas.DataFrame for the Optimizer model
    5) Run the Optimizer, which predicts the best set of parameters for this iteration

Repeat for a number of 'max_iterations'.

Results
-------
The 'results' directory contain:
    - 'loss': Loss of the Surrogate and Optimizer models
    - 'models': pytorch files with the states and weights of the surrogate and optimizer models
    - 'parameters': a list of parameter dictionaries (.json) with the parameters of each iteration
    - 'plots': evolution plots of the parameters
    - 'task_outputs': Task outputs generated by the b2luigi scheduler. Can be safely removed to
        save disc space.
"""


def optimize(
        parameters: List[SimulationParameter] | SimulationParameterDictionary,
        user_interface: AIDOBaseUserInterface,
        simulation_tasks: int = 1,
        max_iterations: int = 50,
        threads: int = 1,
        results_dir: str | os.PathLike = "./results/",
        description: str = ""
        ):
    """
    Args:
        parameters (List[AIDO.parameter] | SimulationParameterDictionary): Instance of a
            SimulationParameterDictionary with all the desired parameters. These are the starting parameters
            for the optimization loop and the outcome can depend on their starting values. Can also be a
            simple list of SimulationParameter / AIDO.parameters (the latter is a proxy method).
        user_interface (class or instance inherited from AIDOUserInterface): Regulates the interaction
            between user-defined code (simulation, reconstruction, merging of output files) and the
            AIDO workflow manager.
        simulation_tasks (int): Number of simulations started during each iteration.
        max_iterations (int): Maximum amount of iterations of the optimization loop
        threads (int): Allowed number of threads to allocate the simulation tasks.
            NOTE There is no benefit in having 'threads' > 'simulation_tasks' per se, but in some cases,
            errors involving missing dependencies after the simulation step can be fixed by setting:
            'threads' = 'simulation_tasks' + 1.
        results_dir (str): Indicates where to save the results. Useful when differentiating runs from
            each other.
        description (str, optional): Additional text associated with the run. Is saved in the parameter
            json files under 'metadata.description"
    """
    if isinstance(parameters, list):
        parameters = SimulationParameterDictionary(parameters)

    parameters.description += description

    start_scheduler(
        parameters=parameters,
        user_interface=user_interface,
        simulation_tasks=simulation_tasks,
        max_iterations=max_iterations,
        threads=threads,
        results_dir=results_dir
    )


def check_results_folder_format(directory: str | os.PathLike) -> bool:
    """
    Checks if the specified directory is of the 'results' format specified by AIDO.optimize().

    Args:
        directory (str | os.PathLike): The path to the directory to check.

    Returns:
        bool: True if the directory contains all the required folders
                ("loss", "models", "parameters", "plots", "task_outputs"),
                False otherwise.
    """
    existing_folders = set(os.listdir(directory))
    required_folders = set(["loss", "models", "parameters", "plots", "task_outputs"])
    return True if required_folders.issubset(existing_folders) else False
